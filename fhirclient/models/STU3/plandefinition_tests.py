#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  Generated from FHIR 3.0.1.11917 on 2019-10-12.
#  2019, SMART Health IT.

from __future__ import unicode_literals
import os
import io
import unittest
import json
from . import plandefinition
from .fhirdate import FHIRDate


class PlanDefinitionTests(unittest.TestCase):
    def instantiate_from(self, filename):
        datadir = os.environ.get('FHIR_UNITTEST_DATADIR') or ''
        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:
            js = json.load(handle)
            self.assertEqual("PlanDefinition", js["resourceType"])
        return plandefinition.PlanDefinition(js)
    
    def testPlanDefinition1(self):
        inst = self.instantiate_from("plandefinition-example-kdn5-simplified.json")
        self.assertIsNotNone(inst, "Must have instantiated a PlanDefinition instance")
        self.implPlanDefinition1(inst)
        
        js = inst.as_json()
        self.assertEqual("PlanDefinition", js["resourceType"])
        inst2 = plandefinition.PlanDefinition(js)
        self.implPlanDefinition1(inst2)
    
    def implPlanDefinition1(self, inst):
        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[0].extension[0].extension[0].url, "day")
        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[0].extension[0].extension[0].valueInteger, 1)
        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[0].extension[0].extension[1].url, "day")
        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[0].extension[0].extension[1].valueInteger, 8)
        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[0].extension[0].url, "http://hl7.org/fhir/StructureDefinition/timing-daysOfCycle")
        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[0].id, "action-1")
        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[0].textEquivalent, "Gemcitabine 1250 mg/m² IV over 30 minutes on days 1 and 8")
        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[1].extension[0].extension[0].url, "day")
        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[1].extension[0].extension[0].valueInteger, 1)
        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[1].extension[0].url, "http://hl7.org/fhir/StructureDefinition/timing-daysOfCycle")
        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[1].id, "action-2")
        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[1].relatedAction[0].actionId, "action-1")
        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[1].relatedAction[0].relationship, "concurrent-with-start")
        self.assertEqual(inst.action[0].action[0].action[0].action[0].action[1].textEquivalent, "CARBOplatin AUC 5 IV over 30 minutes on Day 1")
        self.assertEqual(inst.action[0].action[0].action[0].action[0].id, "cycle-definition-1")
        self.assertEqual(inst.action[0].action[0].action[0].action[0].textEquivalent, "21-day cycle for 6 cycles")
        self.assertEqual(inst.action[0].action[0].action[0].action[0].timingTiming.repeat.count, 6)
        self.assertEqual(inst.action[0].action[0].action[0].action[0].timingTiming.repeat.duration, 21)
        self.assertEqual(inst.action[0].action[0].action[0].action[0].timingTiming.repeat.durationUnit, "d")
        self.assertEqual(inst.action[0].action[0].action[0].groupingBehavior, "sentence-group")
        self.assertEqual(inst.action[0].action[0].action[0].selectionBehavior, "exactly-one")
        self.assertEqual(inst.action[0].action[0].selectionBehavior, "all")
        self.assertEqual(inst.action[0].selectionBehavior, "exactly-one")
        self.assertEqual(inst.approvalDate.date, FHIRDate("2016-07-27").date)
        self.assertEqual(inst.approvalDate.as_json(), "2016-07-27")
        self.assertEqual(inst.contained[0].id, "1111")
        self.assertEqual(inst.contained[1].id, "2222")
        self.assertEqual(inst.contributor[0].name, "Lee Surprenant")
        self.assertEqual(inst.contributor[0].type, "author")
        self.assertEqual(inst.copyright, "All rights reserved.")
        self.assertTrue(inst.experimental)
        self.assertEqual(inst.id, "KDN5")
        self.assertEqual(inst.identifier[0].system, "http://example.org/ordertemplates")
        self.assertEqual(inst.identifier[0].value, "KDN5")
        self.assertEqual(inst.lastReviewDate.date, FHIRDate("2016-07-27").date)
        self.assertEqual(inst.lastReviewDate.as_json(), "2016-07-27")
        self.assertEqual(inst.publisher, "National Comprehensive Cancer Network, Inc.")
        self.assertEqual(inst.relatedArtifact[0].display, "NCCN Guidelines for Kidney Cancer. V.2.2016")
        self.assertEqual(inst.relatedArtifact[0].type, "derived-from")
        self.assertEqual(inst.relatedArtifact[0].url, "http://www.example.org/professionals/physician_gls/PDF/kidney.pdf")
        self.assertEqual(inst.relatedArtifact[1].citation, "Oudard S, et al. J Urol. 2007;177(5):1698-702")
        self.assertEqual(inst.relatedArtifact[1].type, "citation")
        self.assertEqual(inst.relatedArtifact[1].url, "http://www.ncbi.nlm.nih.gov/pubmed/17437788")
        self.assertEqual(inst.status, "draft")
        self.assertEqual(inst.text.status, "additional")
        self.assertEqual(inst.title, "Gemcitabine/CARBOplatin")
        self.assertEqual(inst.type.text, "Chemotherapy Order Template")
        self.assertEqual(inst.useContext[0].code.code, "treamentSetting-or-diseaseStatus")
        self.assertEqual(inst.useContext[0].code.system, "http://example.org/fhir/CodeSystem/indications")
        self.assertEqual(inst.useContext[0].extension[0].url, "http://hl7.org/fhir/StructureDefinition/usagecontext-group")
        self.assertEqual(inst.useContext[0].extension[0].valueString, "A")
        self.assertEqual(inst.useContext[0].valueCodeableConcept.text, "Metastatic")
        self.assertEqual(inst.useContext[1].code.code, "disease-or-histology")
        self.assertEqual(inst.useContext[1].code.system, "http://example.org/fhir/CodeSystem/indications")
        self.assertEqual(inst.useContext[1].extension[0].url, "http://hl7.org/fhir/StructureDefinition/usagecontext-group")
        self.assertEqual(inst.useContext[1].extension[0].valueString, "A")
        self.assertEqual(inst.useContext[1].valueCodeableConcept.text, "Collecting Duct/Medullary Subtypes")
        self.assertEqual(inst.useContext[2].code.code, "focus")
        self.assertEqual(inst.useContext[2].code.system, "http://hl7.org/fhir/usage-context-type")
        self.assertEqual(inst.useContext[2].extension[0].url, "http://hl7.org/fhir/StructureDefinition/usagecontext-group")
        self.assertEqual(inst.useContext[2].extension[0].valueString, "A")
        self.assertEqual(inst.useContext[2].valueCodeableConcept.text, "Kidney Cancer")
        self.assertEqual(inst.useContext[3].code.code, "treatmentSetting-or-diseaseStatus")
        self.assertEqual(inst.useContext[3].code.system, "http://example.org/fhir/CodeSystem/indications")
        self.assertEqual(inst.useContext[3].extension[0].url, "http://hl7.org/fhir/StructureDefinition/usagecontext-group")
        self.assertEqual(inst.useContext[3].extension[0].valueString, "B")
        self.assertEqual(inst.useContext[3].valueCodeableConcept.text, "Relapsed")
        self.assertEqual(inst.useContext[4].code.code, "disease-or-histology")
        self.assertEqual(inst.useContext[4].code.system, "http://example.org/fhir/CodeSystem/indications")
        self.assertEqual(inst.useContext[4].extension[0].url, "http://hl7.org/fhir/StructureDefinition/usagecontext-group")
        self.assertEqual(inst.useContext[4].extension[0].valueString, "B")
        self.assertEqual(inst.useContext[4].valueCodeableConcept.text, "Collecting Duct/Medullary Subtypes")
        self.assertEqual(inst.useContext[5].code.code, "focus")
        self.assertEqual(inst.useContext[5].code.system, "http://hl7.org/fhir/usage-context-type")
        self.assertEqual(inst.useContext[5].extension[0].url, "http://hl7.org/fhir/StructureDefinition/usagecontext-group")
        self.assertEqual(inst.useContext[5].extension[0].valueString, "B")
        self.assertEqual(inst.useContext[5].valueCodeableConcept.text, "Kidney Cancer – Collecting Duct/Medullary Subtypes - Metastatic")
        self.assertEqual(inst.version, "1")
    
    def testPlanDefinition2(self):
        inst = self.instantiate_from("plandefinition-options-example.json")
        self.assertIsNotNone(inst, "Must have instantiated a PlanDefinition instance")
        self.implPlanDefinition2(inst)
        
        js = inst.as_json()
        self.assertEqual("PlanDefinition", js["resourceType"])
        inst2 = plandefinition.PlanDefinition(js)
        self.implPlanDefinition2(inst2)
    
    def implPlanDefinition2(self, inst):
        self.assertEqual(inst.action[0].action[0].id, "medication-action-1")
        self.assertEqual(inst.action[0].action[0].title, "Administer Medication 1")
        self.assertEqual(inst.action[0].action[1].id, "medication-action-2")
        self.assertEqual(inst.action[0].action[1].relatedAction[0].actionId, "medication-action-1")
        self.assertEqual(inst.action[0].action[1].relatedAction[0].offsetDuration.unit, "h")
        self.assertEqual(inst.action[0].action[1].relatedAction[0].offsetDuration.value, 1)
        self.assertEqual(inst.action[0].action[1].relatedAction[0].relationship, "after-end")
        self.assertEqual(inst.action[0].action[1].title, "Administer Medication 2")
        self.assertEqual(inst.action[0].groupingBehavior, "logical-group")
        self.assertEqual(inst.action[0].selectionBehavior, "all")
        self.assertEqual(inst.contained[0].id, "activitydefinition-medicationrequest-1")
        self.assertEqual(inst.contained[1].id, "activitydefinition-medicationrequest-2")
        self.assertEqual(inst.id, "options-example")
        self.assertEqual(inst.status, "draft")
        self.assertEqual(inst.text.div, "<div xmlns=\"http://www.w3.org/1999/xhtml\">[Put rendering here]</div>")
        self.assertEqual(inst.text.status, "generated")
        self.assertEqual(inst.title, "This example illustrates relationships between actions.")
    
    def testPlanDefinition3(self):
        inst = self.instantiate_from("plandefinition-protocol-example.json")
        self.assertIsNotNone(inst, "Must have instantiated a PlanDefinition instance")
        self.implPlanDefinition3(inst)
        
        js = inst.as_json()
        self.assertEqual("PlanDefinition", js["resourceType"])
        inst2 = plandefinition.PlanDefinition(js)
        self.implPlanDefinition3(inst2)
    
    def implPlanDefinition3(self, inst):
        self.assertEqual(inst.action[0].cardinalityBehavior, "single")
        self.assertEqual(inst.action[0].condition[0].expression, "exists ([Condition: Obesity]) or not exists ([Observation: BMI] O where O.effectiveDateTime 2 years or less before Today())")
        self.assertEqual(inst.action[0].condition[0].kind, "applicability")
        self.assertEqual(inst.action[0].condition[0].language, "text/cql")
        self.assertEqual(inst.action[0].goalId[0], "reduce-bmi-ratio")
        self.assertEqual(inst.action[0].label, "Measure BMI")
        self.assertEqual(inst.action[0].requiredBehavior, "must-unless-documented")
        self.assertEqual(inst.action[0].title, "Measure, Weight, Height, Waist, Circumference; Calculate BMI")
        self.assertEqual(inst.contained[0].id, "procedure")
        self.assertEqual(inst.contributor[0].contact[0].telecom[0].system, "url")
        self.assertEqual(inst.contributor[0].contact[0].telecom[0].value, "https://www.nhlbi.nih.gov/health-pro/guidelines")
        self.assertEqual(inst.contributor[0].name, "National Heart, Lung, and Blood Institute")
        self.assertEqual(inst.contributor[0].type, "author")
        self.assertEqual(inst.goal[0].addresses[0].coding[0].code, "414916001")
        self.assertEqual(inst.goal[0].addresses[0].coding[0].display, "Obesity (disorder)")
        self.assertEqual(inst.goal[0].addresses[0].coding[0].system, "http://snomed.info/sct")
        self.assertEqual(inst.goal[0].category.text, "Treatment")
        self.assertEqual(inst.goal[0].description.text, "Reduce BMI to below 25")
        self.assertEqual(inst.goal[0].documentation[0].display, "Evaluation and Treatment Strategy")
        self.assertEqual(inst.goal[0].documentation[0].type, "justification")
        self.assertEqual(inst.goal[0].documentation[0].url, "https://www.nhlbi.nih.gov/health-pro/guidelines/current/obesity-guidelines/e_textbook/txgd/42.htm")
        self.assertEqual(inst.goal[0].id, "reduce-bmi-ratio")
        self.assertEqual(inst.goal[0].priority.text, "medium-priority")
        self.assertEqual(inst.goal[0].start.text, "When the patient's BMI Ratio is at or above 25")
        self.assertEqual(inst.goal[0].target[0].detailRange.high.unit, "kg/m2")
        self.assertEqual(inst.goal[0].target[0].detailRange.high.value, 24.9)
        self.assertEqual(inst.goal[0].target[0].due.unit, "a")
        self.assertEqual(inst.goal[0].target[0].due.value, 1)
        self.assertEqual(inst.goal[0].target[0].measure.coding[0].code, "39156-5")
        self.assertEqual(inst.goal[0].target[0].measure.coding[0].display, "Body mass index (BMI) [Ratio]")
        self.assertEqual(inst.goal[0].target[0].measure.coding[0].system, "http://loinc.org")
        self.assertEqual(inst.id, "protocol-example")
        self.assertEqual(inst.identifier[0].system, "http://acme.org")
        self.assertEqual(inst.identifier[0].value, "example-1")
        self.assertEqual(inst.purpose, "Example of A medical algorithm for assessment and treatment of overweight and obesity")
        self.assertEqual(inst.relatedArtifact[0].display, "Overweight and Obesity Treatment Guidelines")
        self.assertEqual(inst.relatedArtifact[0].type, "derived-from")
        self.assertEqual(inst.relatedArtifact[0].url, "http://www.nhlbi.nih.gov/health-pro/guidelines/current/obesity-guidelines/e_textbook/txgd/algorthm/algorthm.htm")
        self.assertEqual(inst.status, "draft")
        self.assertEqual(inst.text.status, "generated")
        self.assertEqual(inst.title, "Obesity Assessment Protocol")
        self.assertEqual(inst.type.coding[0].code, "protocol")
        self.assertEqual(inst.useContext[0].code.code, "focus")
        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].code, "414916001")
        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].display, "Obesity (disorder)")
        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].system, "http://snomed.info/sct")
    
    def testPlanDefinition4(self):
        inst = self.instantiate_from("plandefinition-example.json")
        self.assertIsNotNone(inst, "Must have instantiated a PlanDefinition instance")
        self.implPlanDefinition4(inst)
        
        js = inst.as_json()
        self.assertEqual("PlanDefinition", js["resourceType"])
        inst2 = plandefinition.PlanDefinition(js)
        self.implPlanDefinition4(inst2)
    
    def implPlanDefinition4(self, inst):
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[0].expression, "Now()")
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[0].path, "timing.event")
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[1].expression, "Code '261QM0850X' from SuicideRiskLogic.\"NUCC Provider Taxonomy\" display 'Adult Mental Health'")
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[1].path, "specialty")
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[2].expression, "SuicideRiskLogic.ReferralRequestFulfillmentTime")
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[2].path, "occurrenceDateTime")
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[3].expression, "SuicideRiskLogic.Patient")
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[3].path, "subject")
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[4].expression, "SuicideRiskLogic.Practitioner")
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[4].path, "requester.agent")
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[5].expression, "SuicideRiskLogic.RiskAssessmentScore")
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[5].path, "reasonCode")
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[6].expression, "SuicideRiskLogic.RiskAssessment")
        self.assertEqual(inst.action[0].action[0].action[0].dynamicValue[6].path, "reasonReference")
        self.assertEqual(inst.action[0].action[0].action[0].textEquivalent, "Refer to outpatient mental health program for evaluation and treatment of mental health conditions now")
        self.assertEqual(inst.action[0].action[0].groupingBehavior, "logical-group")
        self.assertEqual(inst.action[0].action[0].selectionBehavior, "any")
        self.assertEqual(inst.action[0].action[0].title, "Consults and Referrals")
        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[0].dynamicValue[0].expression, "'draft'")
        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[0].dynamicValue[0].path, "status")
        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[0].dynamicValue[1].expression, "SuicideRiskLogic.Patient")
        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[0].dynamicValue[1].path, "patient")
        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[0].dynamicValue[2].expression, "SuicideRiskLogic.Practitioner")
        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[0].dynamicValue[2].path, "prescriber")
        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[0].dynamicValue[3].expression, "SuicideRiskLogic.RiskAssessmentScore")
        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[0].dynamicValue[3].path, "reasonCode")
        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[0].dynamicValue[4].expression, "SuicideRiskLogic.RiskAssessment")
        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[0].dynamicValue[4].path, "reasonReference")
        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[0].textEquivalent, "citalopram 20 mg tablet 1 tablet oral 1 time daily now (30 table; 3 refills)")
        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[1].textEquivalent, "escitalopram 10 mg tablet 1 tablet oral 1 time daily now (30 tablet; 3 refills)")
        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[2].textEquivalent, "fluoxetine 20 mg capsule 1 capsule oral 1 time daily now (30 tablet; 3 refills)")
        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[3].textEquivalent, "paroxetine 20 mg tablet 1 tablet oral 1 time daily now (30 tablet; 3 refills)")
        self.assertEqual(inst.action[0].action[1].action[0].action[0].action[4].textEquivalent, "sertraline 50 mg tablet 1 tablet oral 1 time daily now (30 tablet; 3 refills)")
        self.assertEqual(inst.action[0].action[1].action[0].action[0].documentation[0].document.contentType, "text/html")
        self.assertEqual(inst.action[0].action[1].action[0].action[0].documentation[0].document.title, "National Library of Medicine. DailyMed website. CITALOPRAM- citalopram hydrobromide tablet, film coated.")
        self.assertEqual(inst.action[0].action[1].action[0].action[0].documentation[0].document.url, "http://dailymed.nlm.nih.gov/dailymed/drugInfo.cfm?setid=6daeb45c-451d-b135-bf8f-2d6dff4b6b01")
        self.assertEqual(inst.action[0].action[1].action[0].action[0].documentation[0].type, "citation")
        self.assertEqual(inst.action[0].action[1].action[0].action[0].groupingBehavior, "logical-group")
        self.assertEqual(inst.action[0].action[1].action[0].action[0].selectionBehavior, "at-most-one")
        self.assertEqual(inst.action[0].action[1].action[0].action[0].title, "Selective Serotonin Reuptake Inhibitors (Choose a mazimum of one or document reasons for exception)")
        self.assertEqual(inst.action[0].action[1].action[0].action[1].textEquivalent, "Dopamine Norepinephrine Reuptake Inhibitors (Choose a maximum of one or document reasons for exception)")
        self.assertEqual(inst.action[0].action[1].action[0].action[2].textEquivalent, "Serotonin Norepinephrine Reuptake Inhibitors (Choose a maximum of one or doument reasons for exception)")
        self.assertEqual(inst.action[0].action[1].action[0].action[3].textEquivalent, "Norepinephrine-Serotonin Modulators (Choose a maximum of one or document reasons for exception)")
        self.assertEqual(inst.action[0].action[1].action[0].documentation[0].document.contentType, "text/html")
        self.assertEqual(inst.action[0].action[1].action[0].documentation[0].document.extension[0].url, "http://hl7.org/fhir/StructureDefinition/cqif-qualityOfEvidence")
        self.assertEqual(inst.action[0].action[1].action[0].documentation[0].document.extension[0].valueCodeableConcept.coding[0].code, "high")
        self.assertEqual(inst.action[0].action[1].action[0].documentation[0].document.extension[0].valueCodeableConcept.coding[0].system, "http://hl7.org/fhir/evidence-quality")
        self.assertEqual(inst.action[0].action[1].action[0].documentation[0].document.extension[0].valueCodeableConcept.text, "High Quality")
        self.assertEqual(inst.action[0].action[1].action[0].documentation[0].document.title, "Practice Guideline for the Treatment of Patients with Major Depressive Disorder")
        self.assertEqual(inst.action[0].action[1].action[0].documentation[0].document.url, "http://psychiatryonline.org/pb/assets/raw/sitewide/practice_guidelines/guidelines/mdd.pdf")
        self.assertEqual(inst.action[0].action[1].action[0].documentation[0].type, "citation")
        self.assertEqual(inst.action[0].action[1].action[0].groupingBehavior, "logical-group")
        self.assertEqual(inst.action[0].action[1].action[0].selectionBehavior, "at-most-one")
        self.assertEqual(inst.action[0].action[1].action[0].title, "First-Line Antidepressants")
        self.assertEqual(inst.action[0].action[1].groupingBehavior, "logical-group")
        self.assertEqual(inst.action[0].action[1].selectionBehavior, "at-most-one")
        self.assertEqual(inst.action[0].action[1].title, "Medications")
        self.assertEqual(inst.action[0].title, "Suicide Risk Assessment and Outpatient Management")
        self.assertEqual(inst.approvalDate.date, FHIRDate("2016-03-12").date)
        self.assertEqual(inst.approvalDate.as_json(), "2016-03-12")
        self.assertEqual(inst.contact[0].telecom[0].system, "phone")
        self.assertEqual(inst.contact[0].telecom[0].use, "work")
        self.assertEqual(inst.contact[0].telecom[0].value, "415-362-4007")
        self.assertEqual(inst.contact[0].telecom[1].system, "email")
        self.assertEqual(inst.contact[0].telecom[1].use, "work")
        self.assertEqual(inst.contact[0].telecom[1].value, "info@motivemi.com")
        self.assertEqual(inst.contained[0].id, "referralToMentalHealthCare")
        self.assertEqual(inst.contained[1].id, "citalopramPrescription")
        self.assertEqual(inst.contained[2].id, "citalopramMedication")
        self.assertEqual(inst.contained[3].id, "citalopramSubstance")
        self.assertEqual(inst.contributor[0].contact[0].telecom[0].system, "phone")
        self.assertEqual(inst.contributor[0].contact[0].telecom[0].use, "work")
        self.assertEqual(inst.contributor[0].contact[0].telecom[0].value, "415-362-4007")
        self.assertEqual(inst.contributor[0].contact[0].telecom[1].system, "email")
        self.assertEqual(inst.contributor[0].contact[0].telecom[1].use, "work")
        self.assertEqual(inst.contributor[0].contact[0].telecom[1].value, "info@motivemi.com")
        self.assertEqual(inst.contributor[0].name, "Motive Medical Intelligence")
        self.assertEqual(inst.contributor[0].type, "author")
        self.assertEqual(inst.copyright, "© Copyright 2016 Motive Medical Intelligence. All rights reserved.")
        self.assertEqual(inst.date.date, FHIRDate("2015-08-15").date)
        self.assertEqual(inst.date.as_json(), "2015-08-15")
        self.assertEqual(inst.description, "Orders to be applied to a patient characterized as low suicide risk.")
        self.assertEqual(inst.effectivePeriod.end.date, FHIRDate("2017-12-31").date)
        self.assertEqual(inst.effectivePeriod.end.as_json(), "2017-12-31")
        self.assertEqual(inst.effectivePeriod.start.date, FHIRDate("2016-01-01").date)
        self.assertEqual(inst.effectivePeriod.start.as_json(), "2016-01-01")
        self.assertTrue(inst.experimental)
        self.assertEqual(inst.id, "low-suicide-risk-order-set")
        self.assertEqual(inst.identifier[0].system, "http://motivemi.com/artifacts")
        self.assertEqual(inst.identifier[0].use, "official")
        self.assertEqual(inst.identifier[0].value, "mmi:low-suicide-risk-order-set")
        self.assertEqual(inst.jurisdiction[0].coding[0].code, "US")
        self.assertEqual(inst.jurisdiction[0].coding[0].system, "urn:iso:std:iso:3166")
        self.assertEqual(inst.lastReviewDate.date, FHIRDate("2016-08-15").date)
        self.assertEqual(inst.lastReviewDate.as_json(), "2016-08-15")
        self.assertEqual(inst.name, "LowSuicideRiskOrderSet")
        self.assertEqual(inst.publisher, "Motive Medical Intelligence")
        self.assertEqual(inst.purpose, "This order set helps ensure consistent application of appropriate orders for the care of low suicide risk patients.")
        self.assertEqual(inst.relatedArtifact[0].display, "Practice Guideline for the Treatment of Patients with Major Depressive Disorder")
        self.assertEqual(inst.relatedArtifact[0].type, "derived-from")
        self.assertEqual(inst.relatedArtifact[0].url, "http://psychiatryonline.org/pb/assets/raw/sitewide/practice_guidelines/guidelines/mdd.pdf")
        self.assertEqual(inst.relatedArtifact[1].type, "composed-of")
        self.assertEqual(inst.relatedArtifact[2].type, "composed-of")
        self.assertEqual(inst.status, "active")
        self.assertEqual(inst.text.status, "generated")
        self.assertEqual(inst.title, "Low Suicide Risk Order Set")
        self.assertEqual(inst.topic[0].text, "Suicide risk assessment")
        self.assertEqual(inst.url, "http://motivemi.com/artifacts/PlanDefinition/low-suicide-risk-order-set")
        self.assertEqual(inst.usage, "This order set should be applied after assessing a patient for suicide risk, when the findings of that assessment indicate the patient has low suicide risk.")
        self.assertEqual(inst.useContext[0].code.code, "age")
        self.assertEqual(inst.useContext[0].code.system, "http://hl7.org/fhir/usage-context-type")
        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].code, "D000328")
        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].display, "Adult")
        self.assertEqual(inst.useContext[0].valueCodeableConcept.coding[0].system, "https://meshb.nlm.nih.gov")
        self.assertEqual(inst.useContext[1].code.code, "focus")
        self.assertEqual(inst.useContext[1].code.system, "http://hl7.org/fhir/usage-context-type")
        self.assertEqual(inst.useContext[1].valueCodeableConcept.coding[0].code, "87512008")
        self.assertEqual(inst.useContext[1].valueCodeableConcept.coding[0].display, "Mild major depression")
        self.assertEqual(inst.useContext[1].valueCodeableConcept.coding[0].system, "http://snomed.info/sct")
        self.assertEqual(inst.useContext[2].code.code, "focus")
        self.assertEqual(inst.useContext[2].code.system, "http://hl7.org/fhir/usage-context-type")
        self.assertEqual(inst.useContext[2].valueCodeableConcept.coding[0].code, "40379007")
        self.assertEqual(inst.useContext[2].valueCodeableConcept.coding[0].display, "Major depression, recurrent, mild")
        self.assertEqual(inst.useContext[2].valueCodeableConcept.coding[0].system, "http://snomed.info/sct")
        self.assertEqual(inst.useContext[3].code.code, "focus")
        self.assertEqual(inst.useContext[3].code.system, "http://hl7.org/fhir/usage-context-type")
        self.assertEqual(inst.useContext[3].valueCodeableConcept.coding[0].code, "394687007")
        self.assertEqual(inst.useContext[3].valueCodeableConcept.coding[0].display, "Low suicide risk")
        self.assertEqual(inst.useContext[3].valueCodeableConcept.coding[0].system, "http://snomed.info/sct")
        self.assertEqual(inst.useContext[4].code.code, "focus")
        self.assertEqual(inst.useContext[4].code.system, "http://hl7.org/fhir/usage-context-type")
        self.assertEqual(inst.useContext[4].valueCodeableConcept.coding[0].code, "225337009")
        self.assertEqual(inst.useContext[4].valueCodeableConcept.coding[0].display, "Suicide risk assessment")
        self.assertEqual(inst.useContext[4].valueCodeableConcept.coding[0].system, "http://snomed.info/sct")
        self.assertEqual(inst.useContext[5].code.code, "user")
        self.assertEqual(inst.useContext[5].code.system, "http://hl7.org/fhir/usage-context-type")
        self.assertEqual(inst.useContext[5].valueCodeableConcept.coding[0].code, "309343006")
        self.assertEqual(inst.useContext[5].valueCodeableConcept.coding[0].display, "Physician")
        self.assertEqual(inst.useContext[5].valueCodeableConcept.coding[0].system, "http://snomed.info/sct")
        self.assertEqual(inst.useContext[6].code.code, "venue")
        self.assertEqual(inst.useContext[6].code.system, "http://hl7.org/fhir/usage-context-type")
        self.assertEqual(inst.useContext[6].valueCodeableConcept.coding[0].code, "440655000")
        self.assertEqual(inst.useContext[6].valueCodeableConcept.coding[0].display, "Outpatient environment")
        self.assertEqual(inst.useContext[6].valueCodeableConcept.coding[0].system, "http://snomed.info/sct")
        self.assertEqual(inst.version, "1.0.0")
    
    def testPlanDefinition5(self):
        inst = self.instantiate_from("plandefinition-predecessor-example.json")
        self.assertIsNotNone(inst, "Must have instantiated a PlanDefinition instance")
        self.implPlanDefinition5(inst)
        
        js = inst.as_json()
        self.assertEqual("PlanDefinition", js["resourceType"])
        inst2 = plandefinition.PlanDefinition(js)
        self.implPlanDefinition5(inst2)
    
    def implPlanDefinition5(self, inst):
        self.assertEqual(inst.action[0].action[0].condition[0].expression, "Should Administer Zika Virus Exposure Assessment")
        self.assertEqual(inst.action[0].action[0].condition[0].kind, "applicability")
        self.assertEqual(inst.action[0].action[1].condition[0].expression, "Should Order Serum + Urine rRT-PCR Test")
        self.assertEqual(inst.action[0].action[1].condition[0].kind, "applicability")
        self.assertEqual(inst.action[0].action[2].condition[0].expression, "Should Order Serum Zika Virus IgM + Dengue Virus IgM")
        self.assertEqual(inst.action[0].action[2].condition[0].kind, "applicability")
        self.assertEqual(inst.action[0].action[3].condition[0].expression, "Should Consider IgM Antibody Testing")
        self.assertEqual(inst.action[0].action[3].condition[0].kind, "applicability")
        self.assertEqual(inst.action[0].action[4].condition[0].expression, "Should Provide Mosquito Prevention and Contraception Advice")
        self.assertEqual(inst.action[0].action[4].condition[0].kind, "applicability")
        self.assertEqual(inst.action[0].condition[0].expression, "Is Patient Pregnant")
        self.assertEqual(inst.action[0].condition[0].kind, "applicability")
        self.assertEqual(inst.action[0].title, "Zika Virus Assessment")
        self.assertEqual(inst.action[0].triggerDefinition[0].eventName, "patient-view")
        self.assertEqual(inst.action[0].triggerDefinition[0].type, "named-event")
        self.assertEqual(inst.date.date, FHIRDate("2016-11-14").date)
        self.assertEqual(inst.date.as_json(), "2016-11-14")
        self.assertEqual(inst.description, "Zika Virus Management intervention describing the CDC Guidelines for Zika Virus Reporting and Management.")
        self.assertEqual(inst.id, "zika-virus-intervention-initial")
        self.assertEqual(inst.identifier[0].use, "official")
        self.assertEqual(inst.identifier[0].value, "zika-virus-intervention")
        self.assertEqual(inst.relatedArtifact[0].type, "derived-from")
        self.assertEqual(inst.relatedArtifact[0].url, "https://www.cdc.gov/mmwr/volumes/65/wr/mm6539e1.htm?s_cid=mm6539e1_w")
        self.assertEqual(inst.relatedArtifact[1].type, "successor")
        self.assertEqual(inst.status, "active")
        self.assertEqual(inst.text.status, "generated")
        self.assertEqual(inst.title, "Example Zika Virus Intervention")
        self.assertEqual(inst.topic[0].text, "Zika Virus Management")
        self.assertEqual(inst.url, "http://example.org/PlanDefinition/zika-virus-intervention")
        self.assertEqual(inst.version, "1.0.0")

